# see: https://github.com/elasticsearch/kibana/blob/master/sample/nginx.conf
# see: https://github.com/elasticsearch/cookbook-elasticsearch/blob/master/templates/default/elasticsearch_proxy.conf.erb

user vcap vcap;
daemon off;
error_log /var/vcap/sys/log/api/nginx.error.log;
pid /var/vcap/sys/run/api/nginx.pid;

events {
    worker_connections 8192;
    use epoll;
}

http {
    include mime.types;

    log_format combined_custom '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time "$http_x_forwarded_for" $upstream_addr $upstream_status $upstream_response_time';
    access_log  /var/vcap/sys/log/api/nginx.access.log  combined_custom;

    client_body_temp_path /var/vcap/sys/tmp/api/nginx-client-body-temp;

    gzip on;
    gzip_comp_level 2;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types application/json;

    proxy_redirect off;
    proxy_read_timeout 90;
    proxy_temp_path /var/vcap/sys/tmp/api/nginx-proxy-temp;

    # update: proxy headers
    # reason: common practice, better logging

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;

    upstream elasticsearch {
        server <%= p("api.elasticsearch_host") %>;
    }
    upstream kibana {
        server <%= p("api.kibana.host") %>;
    }

    # proxy: Kibana
    # reason: Proxy requests to <%= p("api.kibana.host_header") %> to internal Kibana url
    server {
        listen *:<%= p("api.kibana.port") %>;
        server_name <%= p("api.kibana.host_header") %>;

        # allow: all requests below <%= p("api.kibana.host_header") %>
        # reason: allow access to kibana
        location / {
            proxy_pass http://kibana;
        }
    }

    # proxy: Elasticsearch
    # reason: Proxy all other requests to internal Elasticsearch
    server {
        listen *:<%= p("api.port") %> default_server;
        server_name  api;

        # update: cors headers
        # reason: support running kibana from other hosts

        proxy_pass_header Access-Control-Allow-Origin;
        proxy_pass_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        add_header Access-Control-Allow-Headers 'X-Requested-With, Content-Type';
        add_header Access-Control-Allow-Credentials true;

        # deny: searches against all indices
        # reason: causes us performance issues

        location ~ ^/_all/_m?search {
            deny all;
        }


        # read: index searches
        # reason: we like searching

        location ~ ^/[^\/\*]+(/[^\/\*]+)?/_m?(search|get)$ {
            rewrite ^(.*)$ $1?timeout=15s break;
            proxy_pass http://elasticsearch;
        }
        location ~ ^/_m?(search|get)$ {
            rewrite ^(.*)$ $1?timeout=15s break;
            proxy_pass http://elasticsearch;
        }

        # read: scrolled searches
        # reason: occasionally used by some of our batch scripts

        location ~ ^/_search/scroll$ {
            limit_except GET {
                deny all;
            }

            proxy_pass http://elasticsearch;
        }


        # read|write: kibana dashboard storage
        # reason: so users can save and share their dashboards
        location ~ ^/(\.kibana).*$ {
            proxy_pass http://elasticsearch;
        }
        location ~ ^/(kibana-int|\.marvel-kibana)/(dashboard/.*|temp.*)$ {
            proxy_pass http://elasticsearch;
        }


        # read: index metadata
        # reason: for kibana and so we can easily use elastichq

        location ~ ^/([^/]+/)?_(aliases|mapping|mapping/field/.+|nodes|stats|status)$ {
            limit_except GET {
                deny all;
            }

            proxy_pass http://elasticsearch;
        }


        # read: cluster + node metadata
        # reason: so we can easily use elastichq

        location ~ ^/(_cluster|_nodes) {
            limit_except GET {
                deny all;
            }

            proxy_pass http://elasticsearch;
        }


        # plugin: marvel, elastichq, kibana (as plugin)
        # reason: it's mostly read-only

        location ~ ^/_plugin/(marvel|HQ|kibana) {
            limit_except GET {
                deny all;
            }

            proxy_pass http://elasticsearch;
        }


        # read: elasticsearch hello
        # reason: easy health check

        location ~ ^/$ {
            limit_except GET {
                deny all;
            }

            proxy_pass http://elasticsearch;
        }


        # deny: everything else
        # reason: we're secure like that

        location / {
            deny all;
        }
    }
}
