filter {

    <% if 'DEBUG' == p('logstash.metadata_level') %>
        mutate {
            add_field => [ "@parser[job]", "<%= name %>/<%= index %>" ]
        }

        ruby {
            code => "event['@parser[timestamp]'] = Time.now.iso8601(3)"
        }
    <% end %>

    #
    # Default type to _logstash_input 
    #

    alter {
        coalesce => [
            "type", "%{_logstash_input}", "%{_type}"
        ]
    }

    #
    # rewrite our defined globals
    #

    if [type] == 'redis' or [type] == 'redis-input' {
        mutate {
            remove_field => [ 'type' ]
        }
    }

    if [type] != '' {
        mutate {
            rename => [ "type", "@type" ]
        }
    }

    if [message] != '' {
        mutate {
            rename => [ "message", "@message" ]
        }
    } else if [message] == '' and [@message] !~ /^.+$/ {
        drop { }
    }

    #
    # avoid bad interpolations, like `%{type}` when its missing
    #

    if [@type] == "" {
        mutate {
            add_field => [ "@type", "unknown" ]
        }
    }

    #
    # ignore particularly useless lines
    #

    if [@message] =~ /^\s*$/ or [@message] =~ /^#.*$/ {
        drop { }
    }

    #
    # trim excessively long messages
    #

    ruby {
        code => "(event['@message'] = event['@message'][0,<%= p("logstash_parser.message_max_size") %>] and (event['tags'] ||= []) << '_groktrimmed') if event['@message'] and event['@message'].length > <%= p("logstash_parser.message_max_size") %>"
    }

    #
    # trim excess whitespace
    #

    mutate {
        strip => [ "@message" ]
    }

    #
    # Additional filter types from deployment manifest
    #
