

if "logsearch-nginx-access-v1" == [@type] {
  #
# src/logstash-filters/snippets/nginx-access-v1.conf
#
grok {
  match => [ "@message", "%{IPORHOST:remote_addr} - (?:%{USER:remote_user}|-) \[%{HTTPDATE:time_local}\] \"(?:%{WORD:request_method} %{URIPATHPARAM:request_uri}(?: HTTP/%{NUMBER:request_httpversion})?|-)\" %{INT:status} (?:%{NONNEGINT:body_bytes_sent}|-) \"(?:%{URI:http_referer}|-)\" %{QS:http_user_agent} (?:%{NUMBER:request_time}|-)" ]
  tag_on_failure => [ "fail/logsearch/api/nginx/access/v1" ]
}

date {
  match => [ "time_local", "dd/MMM/YYYY:HH:mm:ss Z" ]
  timezone => "UTC"
  remove_field => [ "time_local" ]
}

mutate {
  convert => [ "status", "integer" ]
  convert => [ "body_bytes_sent", "integer" ]
  convert => [ "request_time", "float" ]
}

}

if "logsearch-nginx-access-v2" == [@type] {
  #
# src/logstash-filters/snippets/nginx-access-v2.conf
#
grok {
  match => [ "@message", "%{IPORHOST:remote_addr} - (?:%{USER:remote_user}|-) \[%{HTTPDATE:time_local}\] \"(?:%{WORD:request_method} %{URIPATHPARAM:request_uri}(?: HTTP/%{NUMBER:request_httpversion})?|-)\" %{INT:status} (?:%{NONNEGINT:body_bytes_sent}|-) \"(?:%{URI:http_referer}|-)\" %{QS:http_user_agent} (?:%{NUMBER:request_time}|-) \"%{DATA:http_x_forwarded_for}\" %{IPORHOST:upstream_addr}:%{POSINT:upstream_port} %{INT:upstream_status} (?:%{NUMBER:upstream_response_time}|-)" ]
  tag_on_failure => [ "fail/logsearch/api/nginx/access/v2" ]
}

date {
  match => [ "time_local", "dd/MMM/YYYY:HH:mm:ss Z" ]
  timezone => "UTC"
  remove_field => [ "time_local" ]
}

mutate {
  convert => [ "status", "integer" ]
  convert => [ "upstream_status", "integer" ]
  convert => [ "body_bytes_sent", "integer" ]
  convert => [ "request_time", "float" ]
  convert => [ "upstream_response_time", "float" ]
}

}

if "logsearch-nginx-error-v1" == [@type] {
  #
# src/logstash-filters/snippets/nginx-error-v1.conf
#
grok {
  match => [ "@message", "(?<time_local>%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{HOUR}:?%{MINUTE}:?%{SECOND}) \[%{WORD:severity}\] %{INT:worker_pid}#%{INT:worker_thread}: %{GREEDYDATA:message}" ]
  tag_on_failure => [ "fail/logsearch/api/nginx/error/v1" ]
}

date {
  match => [ "time_local", "YYYY/MM/dd HH:mm:ss" ]
  timezone => "UTC"
  remove_field => [ "time_local" ]
}

mutate {
  convert => [ "worker_pid", "integer" ]
  convert => [ "worker_thread", "integer" ]
}

}

if "logsearch-elasticsearch-stdout-v1" == [@type] {
  #
# src/logstash-filters/snippets/elasticsearch-stdout-v1.conf
#
grok {
  match => [ "@message", "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{WORD:level}\s*\]\[(?<logger>[^\]\s]+)\s*\]\s+\[(?<node>[^\]\s]+)\s*\] %{GREEDYDATA:message}" ]
  tag_on_failure => [ "fail/logsearch/elasticsearch/stdout/v1" ]
}

# date {} wants 2015-03-13 19:17:23.557 not 2015-03-13 19:17:23,557 
mutate {
 gsub => [ "timestamp", ",", "." ]
}

date {
  match => [ "timestamp", "ISO8601" ]
  timezone => "UTC"
  remove_field => [ "timestamp" ]
}

if [logger] == "index.search.slowlog.query" {
  # see https://github.com/elastic/elasticsearch/blob/efbda318d061867c098be5112561f8099227b9d4/src/main/java/org/elasticsearch/index/search/slowlog/ShardSlowLogSearchService.java#L185
  grok {
    match => [ "message", "^\[(?<slowlog_index>[^\]]+)\]\[%{WORD:slowlog_shard:int}\] took\[([^\]]+)\], took_millis\[%{POSINT:slowlog_took_millis:int}\], types\[(?<slowlog_types>[^\]\s]*)\], stats\[(?<slowlog_stats>[^\]\s]*)\], search_type\[%{WORD:slowlog_search_type}\], total_shards\[%{POSINT:slowlog_total_shards:int}\], source\[(?<slowlog_source>.*)\], extra_source\[(?<slowlog_extra_source>.*)\],?$" ]
    tag_on_failure => [ "fail/logsearch/elasticsearch/stdout/v1/slowlog" ]
  }

  mutate {
    split => [ "slowlog_types", "," ]
    split => [ "slowlog_stats", "," ]
  }
}

}
